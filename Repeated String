import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'repeatedString' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts following parameters:
     *  1. STRING s
     *  2. LONG_INTEGER n
     */

    public static long repeatedString(String s, long n) {
    // Write your code here
    // int y=(int)n,l=0;
    // List<Character> list = new ArrayList<>();
    // List<Character> aList = new ArrayList<>();
    // for(char c:s.toCharArray()){
    //     list.add(c);
    // }
    // int index = 0;
    // while (aList.size() < n) {
    //     aList.add(list.get(index));
    //     index++;
    //     if (index == list.size()) {
    //         index = 0;
    //         }
    // }
    // // char c = aList.get(y - 1);
    // // System.out.println(c);
    // for (char ch : aList) {
    // if (ch == aList.get(y - 1)) {
    //     l++;
    // }
    // }
    // return l;
    // if (!s.contains("a")) return 0;
    // long count = 0;
    // int i = 0;
    // for (long j = 0; j < n; j++) {
    //     if (s.charAt(i) == 'a') {
    //         count++;
    //     }
    //     i++;
    //     if (i == s.length()) {
    //         i = 0;
    //     }
    // }
    // return count;
     if (!s.contains("a")) return 0;
    long f = n / s.length();
    long r = n % s.length();
    long c = 0;
    for (int i = 0; i < s.length(); i++) {
        if (s.charAt(i) == 'a') c++;
    }
    long count = f * c;
    for (int i = 0; i < r; i++) {
        if (s.charAt(i) == 'a') count++;
    }
    return count;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String s = bufferedReader.readLine();

        long n = Long.parseLong(bufferedReader.readLine().trim());

        long result = Result.repeatedString(s, n);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

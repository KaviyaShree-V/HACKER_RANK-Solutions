import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'pickingNumbers' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY a as parameter.
     */

    public static int pickingNumbers(List<Integer> a) {
    // Write your code here
    // int result=0;
    // Map<Integer,Integer> check = new HashMap<>();
    // for(int n:a){
    //     if (check.containsKey(n)) {
    //         check.put(n, check.get(n) + 1);
    //         } else {
    //             check.put(n, 1);
    //         }
    // }
    // int maxCount = Integer.MIN_VALUE;
    // int maxNum = -1;
    // for (Map.Entry<Integer, Integer> entry : check.entrySet()) {
    // if (entry.getValue() > maxCount) {
    //     maxCount = entry.getValue();
    //     maxNum = entry.getKey();
    // }
    // check.remove(maxNum);
    // }
    // result+=maxCount;
    //   Collections.sort(a);

        // Map<Integer, Integer> m = new HashMap<>();
        // for (int n : a) {
        //     if (m.containsKey(n)) {
        //         m.put(n, m.get(n) + 1);
        //     } else {
        //         m.put(n, 1);
        //     }
        // }

        // List<Integer> k = new ArrayList<>(m.keySet());
        // Collections.sort(k);

        // int x = k.get(k.size() - 1);
        // int y = k.get(k.size() - 2);
        // System.out.println("x = "+x+" y = "+y);
        // int sum = m.get(x) + m.get(y);
        // if(sum>=2){
        //     sum=sum+1;
        // }
        // System.out.println("mx = "+m.get(x)+"my = "+m.get(y));
        // return sum;
        // Map<Integer, Integer> check = new HashMap<>();
        // for (int n : a) {
        //     if (check.containsKey(n)) {
        //         check.put(n, check.get(n) + 1);
        //     } else {
        //         check.put(n, 1);
        //     }
        // }

        // List<Integer> doublecheck = new ArrayList<>(check.values());
        // if (doublecheck.size() == 1) {
        //     return doublecheck.get(0);
        // }

        // Collections.sort(doublecheck, Collections.reverseOrder());

        // int sum = doublecheck.get(0) + doublecheck.get(1);
        // return sum;
    Map<Integer, Integer> check = new HashMap<>();
    for (int n : a) {
        if (check.containsKey(n)) {
                check.put(n, check.get(n) + 1);
            } else {
                check.put(n, 1);
            }
    }

    int maxLen = 0;
    for (int key : check.keySet()) {
        int curr = check.get(key);
        int next = 0;
        if (check.containsKey(key + 1)) {
            next = check.get(key + 1);
            } else {
                next = 0;
                }
        maxLen = Math.max(maxLen, curr + next);
    }

    return maxLen;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> a = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.pickingNumbers(a);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

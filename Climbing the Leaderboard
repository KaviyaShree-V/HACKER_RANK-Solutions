import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'climbingLeaderboard' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY ranked
     *  2. INTEGER_ARRAY player
     */

    public static List<Integer> climbingLeaderboard(List<Integer> ranked, List<Integer> player) {
    // Write your code here
     Set<Integer> srank = new HashSet<>(ranked);
        List<Integer> sortedRanked = new ArrayList<>(srank);
        Collections.sort(sortedRanked, Collections.reverseOrder());

        List<Integer> result = new ArrayList<>();
        int idx = sortedRanked.size() - 1;

        for (int score : player) {
            while (idx >= 0 && score >= sortedRanked.get(idx)) {
                idx--;
            }
            result.add(idx + 2);
        }

        return result;
//     Set<Integer> srank = new HashSet<>(ranked);
// List<Integer> result = new ArrayList<>();

// for (int i = 0; i < player.size(); i++) {
//     srank.add(player.get(i));
//     List<Integer> sortedStore = new ArrayList<>(srank);
//     sortedStore.sort(Comparator.reverseOrder());
//     result.add(sortedStore.indexOf(player.get(i)) + 1); 
// }
// return result;

    // Set<Integer> srank = new HashSet<>(ranked);
    // List<Integer> store = new ArrayList<>(srank);
    // List<Integer> result = new ArrayList<>();
    //     for(int i=0;i<player.size();i++){
    //         store.add(player.get(i));
    //         store.sort(Comparator.reverseOrder());
    //         result.add(store.indexOf(player.get(i))+1);
    //     }                
    // return result;
    // }
    // for (int num : ranked) {
    //         if (!store.contains(num)||store.isEmpty()) {
    //             store.add(num);
    //         }
    //     }
    // for(int i=0;i<player.size();i++){
    //     // int g= player.get(i);
    //     // System.out.println("g "+g);
    //     store.add(player.get(i));
    //     store.sort(Comparator.reverseOrder());
    //     // int h = store.indexOf(g)+1;
    //     // System.out.println("h "+h);
    //     result.add(store.indexOf(player.get(i))+1);
    // } }
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int rankedCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> ranked = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int playerCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> player = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.climbingLeaderboard(ranked, player);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}

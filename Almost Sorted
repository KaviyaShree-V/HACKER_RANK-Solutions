import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'almostSorted' function below.
     *
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static void almostSorted(List<Integer> arr) {
    // Write your code here
    boolean b = true, b1 = false;
    int y = -1, z = -1;
    List<Integer> check = new ArrayList<>(arr);

    for (int i = 0; i < arr.size() - 1; i++) {
        if (arr.get(i) > arr.get(i + 1)) {
            b = false;
            break;
        }
    }

    if (b) {
        System.out.println("yes");
        return;
    }

    int start = -1, end = -1;
    for (int i = 0; i < arr.size() - 1; i++) {
        if (arr.get(i) > arr.get(i + 1)) {
            if (start == -1)
            start = i;
            end = i + 1;
        }
    }

    while (end < arr.size() - 1 && arr.get(end) > arr.get(end + 1)) {
        end++;
    }

    check = new ArrayList<>(arr);
    int temp = check.get(start);
    check.set(start, check.get(end));
    check.set(end, temp);

    b1 = true;
    for (int i = 0; i < check.size() - 1; i++) {
        if (check.get(i) > check.get(i + 1)) {
            b1 = false;
            break;
        }
    }
    if (b1) {
        System.out.println("yes");
        System.out.println("swap " + (start + 1) + " " + (end + 1));
        return;
    }
    check = new ArrayList<>(arr);
    Collections.reverse(check.subList(start, end + 1));

    boolean bb = true;
    for (int i = 0; i < check.size() - 1; i++) {
        if (check.get(i) > check.get(i + 1)) {
            bb = false;
            break;
        }
    }

    if (bb) {
        System.out.println("yes");
        System.out.println("reverse " + (start + 1) + " " + (end + 1));
    } else {
        System.out.println("no");
    }
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        Result.almostSorted(arr);

        bufferedReader.close();
    }
}

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'permutationEquation' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY p as parameter.
     */

    public static List<Integer> permutationEquation(List<Integer> p) {
    // Write your code here
    Map<Integer,Integer> map = new HashMap<>();
    List<Integer> r = new ArrayList<>();
    for(int i=0;i<p.size();i++){
        map.put(p.get(i),i+1);
    }
    // // for(int i=0; i<=p.size(); i++){
    // //     int first = i;
    // //     int second=0;
    // //     if(first == p.get(i)){
    // //         second = second+0;
    // //     }
    // // }
    for (int i=1 ; i<=p.size() ; i++) {
        int first = map.get(i);  
        int second = map.get(first);
        r.add(second);
    }
    // // for(Map.Entry<Integer,Integer> entry : map.entrySet()){
    // // for(int j=1;j<map.size();j++){
    // //     int firstValue = j;
    // //     int secondValue = 0;
    // //     for(int k=1;k<map.size();k++){
    // //         if(entry.getKey()== entry.getValue()){
                
    // //         }
    // //     }
    // // }
    // // }
    // for (int x = 1; x <= p.size(); x++) {
    // int firstIndex = map.get(x);          // index of x
    // int secondIndex = map.get(firstIndex); // index of that index
    // r.add(secondIndex);
    // }
    // return r;
        return r;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> p = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.permutationEquation(p);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
